plugins {
	id 'fabric-loom' version "${loom_version}"
	id 'maven-publish'
}

// Apply version management script
apply from: 'version.gradle'

// Apply release notes generator
apply from: 'scripts/generate-release-notes.gradle'

group = project.maven_group

// Set archives name based on build type
def buildType = project.findProperty('build_type') ?: 'dev'
def baseName = project.findProperty('archives_base_name') ?: 'pickupextender'
def minecraftVersion = project.findProperty('minecraft_version') ?: 'unknown'

if (buildType == 'dev') {
    base.archivesName = "${baseName}-${minecraftVersion}-dev"
} else if (buildType == 'production') {
    base.archivesName = "${baseName}-${minecraftVersion}-production"
} else {
    base.archivesName = "${baseName}-${minecraftVersion}"
}

repositories {
	// Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on other mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html
	// for more information about repositories.
	maven {
		name = "Shedaniel"
		url = "https://maven.shedaniel.me/"
	}
	maven {
		name = "TerraformersMC"
		url = "https://maven.terraformersmc.com/"
	}
}

loom {
	splitEnvironmentSourceSets()

	mods {
		"pickupextender" {
			sourceSet sourceSets.main
			sourceSet sourceSets.client
		}
	}

}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
	
	// ModMenu
	modImplementation "com.terraformersmc:modmenu:${project.modmenu_version}"
	
	// Cloth Config
	modApi "me.shedaniel.cloth:cloth-config-fabric:${project.cloth_config_version}"

}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": inputs.properties.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 17
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17
}

jar {
	inputs.property "archivesName", project.base.archivesName

	from("LICENSE") {
		rename { "${it}_${inputs.properties.archivesName}"}
	}
}

// Build tasks for different environments
task buildDev {
    group = 'build'
    description = 'Build development version'
    dependsOn 'setBuildTypeDev', 'build'
}

task buildProduction {
    group = 'build'
    description = 'Build production version'
    dependsOn 'setBuildTypeProduction', 'build'
}

task buildRelease {
    group = 'build'
    description = 'Build release version'
    dependsOn 'setBuildTypeRelease', 'build'
}

task setBuildTypeDev {
    group = 'versioning'
    description = 'Set build type to dev'
    doLast {
        def propertiesFile = file('gradle.properties')
        def content = propertiesFile.text
        content = content.replaceAll(/build_type=.*/, "build_type=dev")
        propertiesFile.text = content
        println "Set build type to: dev"
    }
}

task setBuildTypeProduction {
    group = 'versioning'
    description = 'Set build type to production'
    doLast {
        def propertiesFile = file('gradle.properties')
        def content = propertiesFile.text
        content = content.replaceAll(/build_type=.*/, "build_type=production")
        propertiesFile.text = content
        println "Set build type to: production"
    }
}

task setBuildTypeRelease {
    group = 'versioning'
    description = 'Set build type to release'
    doLast {
        def propertiesFile = file('gradle.properties')
        def content = propertiesFile.text
        content = content.replaceAll(/build_type=.*/, "build_type=release")
        propertiesFile.text = content
        println "Set build type to: release"
    }
}

// Task to clean and rebuild
task cleanBuild {
    group = 'build'
    description = 'Clean and rebuild the project'
    dependsOn 'clean', 'build'
}

task cleanBuildDev {
    group = 'build'
    description = 'Clean and build development version'
    dependsOn 'clean', 'buildDev'
}

task cleanBuildProduction {
    group = 'build'
    description = 'Clean and build production version'
    dependsOn 'clean', 'buildProduction'
}

// configure the maven publication
publishing {
	publications {
		create("mavenJava", MavenPublication) {
			artifactId = project.base.archivesName
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}